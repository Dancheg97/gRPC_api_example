// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServerClient is the client API for TestServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServerClient interface {
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	StreamOut(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestServer_StreamOutClient, error)
	StreamIn(ctx context.Context, opts ...grpc.CallOption) (TestServer_StreamInClient, error)
	StreamInOut(ctx context.Context, opts ...grpc.CallOption) (TestServer_StreamInOutClient, error)
}

type testServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServerClient(cc grpc.ClientConnInterface) TestServerClient {
	return &testServerClient{cc}
}

func (c *testServerClient) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.TestServer/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServerClient) StreamOut(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestServer_StreamOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestServer_ServiceDesc.Streams[0], "/pb.TestServer/StreamOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestServer_StreamOutClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type testServerStreamOutClient struct {
	grpc.ClientStream
}

func (x *testServerStreamOutClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServerClient) StreamIn(ctx context.Context, opts ...grpc.CallOption) (TestServer_StreamInClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestServer_ServiceDesc.Streams[1], "/pb.TestServer/StreamIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamInClient{stream}
	return x, nil
}

type TestServer_StreamInClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type testServerStreamInClient struct {
	grpc.ClientStream
}

func (x *testServerStreamInClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServerStreamInClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServerClient) StreamInOut(ctx context.Context, opts ...grpc.CallOption) (TestServer_StreamInOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestServer_ServiceDesc.Streams[2], "/pb.TestServer/StreamInOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamInOutClient{stream}
	return x, nil
}

type TestServer_StreamInOutClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type testServerStreamInOutClient struct {
	grpc.ClientStream
}

func (x *testServerStreamInOutClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServerStreamInOutClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServerServer is the server API for TestServer service.
// All implementations must embed UnimplementedTestServerServer
// for forward compatibility
type TestServerServer interface {
	Unary(context.Context, *Message) (*Message, error)
	StreamOut(*Message, TestServer_StreamOutServer) error
	StreamIn(TestServer_StreamInServer) error
	StreamInOut(TestServer_StreamInOutServer) error
	mustEmbedUnimplementedTestServerServer()
}

// UnimplementedTestServerServer must be embedded to have forward compatible implementations.
type UnimplementedTestServerServer struct {
}

func (UnimplementedTestServerServer) Unary(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTestServerServer) StreamOut(*Message, TestServer_StreamOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOut not implemented")
}
func (UnimplementedTestServerServer) StreamIn(TestServer_StreamInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIn not implemented")
}
func (UnimplementedTestServerServer) StreamInOut(TestServer_StreamInOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInOut not implemented")
}
func (UnimplementedTestServerServer) mustEmbedUnimplementedTestServerServer() {}

// UnsafeTestServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServerServer will
// result in compilation errors.
type UnsafeTestServerServer interface {
	mustEmbedUnimplementedTestServerServer()
}

func RegisterTestServerServer(s grpc.ServiceRegistrar, srv TestServerServer) {
	s.RegisterService(&TestServer_ServiceDesc, srv)
}

func _TestServer_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServerServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TestServer/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServerServer).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServer_StreamOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServerServer).StreamOut(m, &testServerStreamOutServer{stream})
}

type TestServer_StreamOutServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type testServerStreamOutServer struct {
	grpc.ServerStream
}

func (x *testServerStreamOutServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _TestServer_StreamIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServerServer).StreamIn(&testServerStreamInServer{stream})
}

type TestServer_StreamInServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testServerStreamInServer struct {
	grpc.ServerStream
}

func (x *testServerStreamInServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServerStreamInServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestServer_StreamInOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServerServer).StreamInOut(&testServerStreamInOutServer{stream})
}

type TestServer_StreamInOutServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testServerStreamInOutServer struct {
	grpc.ServerStream
}

func (x *testServerStreamInOutServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServerStreamInOutServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer_ServiceDesc is the grpc.ServiceDesc for TestServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TestServer",
	HandlerType: (*TestServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _TestServer_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOut",
			Handler:       _TestServer_StreamOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamIn",
			Handler:       _TestServer_StreamIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamInOut",
			Handler:       _TestServer_StreamInOut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
