// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	StreamOut(ctx context.Context, in *Message, opts ...grpc.CallOption) (Gateway_StreamOutClient, error)
	StreamIn(ctx context.Context, opts ...grpc.CallOption) (Gateway_StreamInClient, error)
	StreamInOut(ctx context.Context, opts ...grpc.CallOption) (Gateway_StreamInOutClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.Gateway/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) StreamOut(ctx context.Context, in *Message, opts ...grpc.CallOption) (Gateway_StreamOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/pb.Gateway/StreamOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayStreamOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_StreamOutClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type gatewayStreamOutClient struct {
	grpc.ClientStream
}

func (x *gatewayStreamOutClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) StreamIn(ctx context.Context, opts ...grpc.CallOption) (Gateway_StreamInClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], "/pb.Gateway/StreamIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayStreamInClient{stream}
	return x, nil
}

type Gateway_StreamInClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type gatewayStreamInClient struct {
	grpc.ClientStream
}

func (x *gatewayStreamInClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayStreamInClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) StreamInOut(ctx context.Context, opts ...grpc.CallOption) (Gateway_StreamInOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[2], "/pb.Gateway/StreamInOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayStreamInOutClient{stream}
	return x, nil
}

type Gateway_StreamInOutClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type gatewayStreamInOutClient struct {
	grpc.ClientStream
}

func (x *gatewayStreamInOutClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayStreamInOutClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	Unary(context.Context, *Message) (*Message, error)
	StreamOut(*Message, Gateway_StreamOutServer) error
	StreamIn(Gateway_StreamInServer) error
	StreamInOut(Gateway_StreamInOutServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Unary(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedGatewayServer) StreamOut(*Message, Gateway_StreamOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOut not implemented")
}
func (UnimplementedGatewayServer) StreamIn(Gateway_StreamInServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamIn not implemented")
}
func (UnimplementedGatewayServer) StreamInOut(Gateway_StreamInOutServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInOut not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Gateway/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_StreamOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).StreamOut(m, &gatewayStreamOutServer{stream})
}

type Gateway_StreamOutServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type gatewayStreamOutServer struct {
	grpc.ServerStream
}

func (x *gatewayStreamOutServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_StreamIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).StreamIn(&gatewayStreamInServer{stream})
}

type Gateway_StreamInServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gatewayStreamInServer struct {
	grpc.ServerStream
}

func (x *gatewayStreamInServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayStreamInServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gateway_StreamInOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).StreamInOut(&gatewayStreamInOutServer{stream})
}

type Gateway_StreamInOutServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gatewayStreamInOutServer struct {
	grpc.ServerStream
}

func (x *gatewayStreamInOutServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayStreamInOutServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Gateway_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOut",
			Handler:       _Gateway_StreamOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamIn",
			Handler:       _Gateway_StreamIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamInOut",
			Handler:       _Gateway_StreamInOut_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
